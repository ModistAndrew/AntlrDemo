plugins {
    id 'java'
    id 'antlr'
    id 'application'
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    compileOnly 'org.jetbrains:annotations:24.1.0'
    antlr "org.antlr:antlr4:4.13.1" // use ANTLR version 4
}

generateGrammarSource {
    arguments += ["-visitor", "-no-listener"]
}

application {
    mainClass = 'modist.antlrdemo.Compiler'
    applicationDefaultJvmArgs = ["-Xss1024m"]
}

run {
    args += ['--debug']
    standardInput = System.in
    standardOutput = System.out
}

test {
    useJUnitPlatform()
}

tasks.register('compileBuiltin') {
    def cFileName = 'builtin.c'
    def llFileName = 'builtin.ll'
    def llFileRenamedName = 'builtin_renamed.ll'
    def asmFileName = 'builtin.s'
    def outputDir = layout.buildDirectory.dir('generated/clang').get()
    def sourceDir = layout.projectDirectory.dir('src/main/c')
    doLast {
        mkdir outputDir
        exec {
            executable 'clang'
            args '-S', '-emit-llvm', '--target=riscv32-unknown-elf', '-O2',
                    "${sourceDir}/${cFileName}",
                    '-o', "${outputDir}/${llFileName}"
        }
        copy {
            from file("${outputDir}/${llFileName}")
            into outputDir
            rename {
                llFileRenamedName
            }
            filter {
                String line ->
                    line.replaceAll("_array_", "_array.")
                            .replaceAll("string_", "string.")
            }
        }
        exec {
            executable 'clang'
            args '-S', '--target=riscv32-unknown-elf', '-O2',
                    "${outputDir}/${llFileRenamedName}",
                    '-o', "${outputDir}/${asmFileName}"
        }
    }
}

tasks.build.dependsOn('compileBuiltin')